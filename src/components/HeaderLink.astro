---
import type { HTMLAttributes } from 'astro/types';

type Type = 'primary' | 'secondary' | 'tertiary';
const { href = '', text = '', style = 'primary', class: className, ...props } = Astro.props;

interface Props extends HTMLAttributes<'a'> {
  text: string;
  href: string;
  style: Type;
}

const types: Record<Type, string> = {
  primary: 'hover:shadow-pblueHover',
  secondary: 'hover:shadow-pgreenHover',
  tertiary: 'hover:shadow-ppinkHover',
};

const getType = (style: Type) => {
  return types[style] || '';
};

const pathname = Astro.url.pathname.replace(import.meta.env.BASE_URL, '');
const subpath = pathname.match(/[^\/]+/g);
const isActive = href === pathname || href === '/' + (subpath?.[0] || '');
---

<a
  href={href}
  class:list={[
    className,
    `inline-block rounded-md border-black px-5 py-2 hover:border-1 ${getType(style)} transition ease-in-out`,
    { active: isActive },
  ]}
  {...props}
>
  {text}
</a>

<style>
  a {
    display: inline-block;
    text-decoration: none;
  }
  a.active {
    font-weight: bolder;
  }
</style>
